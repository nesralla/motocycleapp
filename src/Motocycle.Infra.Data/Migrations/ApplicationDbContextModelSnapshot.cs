// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motocycle.Infra.Data.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Motocycle.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Motocycle.Domain.Models.ApiErrorLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ExceptionStackTrace")
                        .HasColumnType("text");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RootCause")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ApiErrorLog");
                });

            modelBuilder.Entity("Motocycle.Domain.Models.Deliveryman", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateBorn")
                        .HasColumnType("date");

                    b.Property<string>("DriveLicense")
                        .IsRequired()
                        .HasColumnType("varchar(11)");

                    b.Property<string>("DriveLicenseFile")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LicenseType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.HasKey("Id");

                    b.ToTable("Deliveryman");
                });

            modelBuilder.Entity("Motocycle.Domain.Models.Motocy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("ModifyAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MotocyModel")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Motocy");
                });

            modelBuilder.Entity("Motocycle.Domain.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CostPerDay")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("Motocycle.Domain.Models.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("DeliverymanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal>("FinishValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MotocyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PreviousEndDate")
                        .HasColumnType("date");

                    b.Property<decimal>("PreviousValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("RentDays")
                        .HasColumnType("int");

                    b.Property<Guid>("RentPlanId")
                        .HasColumnType("uuid");

                    b.Property<int>("RentTypePlan")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliverymanId");

                    b.HasIndex("MotocyId");

                    b.HasIndex("RentPlanId");

                    b.ToTable("Rent");
                });

            modelBuilder.Entity("Motocycle.Domain.Models.Rent", b =>
                {
                    b.HasOne("Motocycle.Domain.Models.Deliveryman", "Deliveryman")
                        .WithMany("Rents")
                        .HasForeignKey("DeliverymanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motocycle.Domain.Models.Motocy", "Motocy")
                        .WithMany("Rents")
                        .HasForeignKey("MotocyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motocycle.Domain.Models.Plan", "RentPlan")
                        .WithMany()
                        .HasForeignKey("RentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliveryman");

                    b.Navigation("Motocy");

                    b.Navigation("RentPlan");
                });

            modelBuilder.Entity("Motocycle.Domain.Models.Deliveryman", b =>
                {
                    b.Navigation("Rents");
                });

            modelBuilder.Entity("Motocycle.Domain.Models.Motocy", b =>
                {
                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
